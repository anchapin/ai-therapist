name: Main Branch CI/CD

on:
  push:
    branches: [ main ]
  schedule:
    # Run comprehensive checks weekly
    - cron: '0 2 * * 1'  # Monday 2 AM UTC

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Quality gates for main branch
  quality-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-cov coverage[toml] bandit safety

    - name: Run critical tests
      run: |
        python -m pytest tests/unit/test_app_core.py tests/security/ -v --tb=short

    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov=voice --cov=security --cov=auth --cov=performance --cov=database --cov-report=xml --cov-fail-under=60

    - name: Security audit
      run: |
        bandit -r . -f json -o security-audit.json --severity-level medium || true
        safety check --json --output dependency-audit.json || true

    - name: Archive quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          coverage.xml
          security-audit.json
          dependency-audit.json
        retention-days: 90

  # Deployment readiness check
  deployment-check:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Check deployment requirements
      run: |
        # Verify all required files exist
        required_files=("requirements.txt" "app.py" "README.md" "AGENTS.md")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done

        # Check if tests pass with deployment configuration
        echo "✅ Deployment requirements satisfied"

    - name: Create deployment artifact
      run: |
        zip -r ai-therapist-deployment.zip . \
          --exclude='.git/*' \
          --exclude='tests/*' \
          --exclude='.pytest_cache/*' \
          --exclude='__pycache__/*' \
          --exclude='*.pyc' \
          --exclude='.coverage*' \
          --exclude='htmlcov/*'

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: ai-therapist-deployment.zip
        retention-days: 30

  # Weekly comprehensive audit
  weekly-audit:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 1'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install audit tools
      run: |
        pip install pip-audit bandit safety

    - name: Comprehensive security audit
      run: |
        bandit -r . -f json -o weekly-security-audit.json
        safety check --json --output weekly-safety-audit.json
        pip-audit --format json --output weekly-pip-audit.json || true

    - name: Code quality check
      run: |
        pip install ruff
        ruff check . --output-format json --output-file weekly-code-quality.json || true

    - name: Upload weekly audit reports
      uses: actions/upload-artifact@v4
      with:
        name: weekly-audit-${{ github.run_number }}
        path: |
          weekly-*.json
        retention-days: 90

    - name: Create audit summary issue
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');

          // Read audit results
          let securityIssues = 0;
          let safetyIssues = 0;
          let qualityIssues = 0;

          try {
            if (fs.existsSync('weekly-security-audit.json')) {
              const security = JSON.parse(fs.readFileSync('weekly-security-audit.json', 'utf8'));
              securityIssues = security.results?.length || 0;
            }
          } catch (e) { console.log('Security audit read failed:', e.message); }

          try {
            if (fs.existsSync('weekly-safety-audit.json')) {
              const safety = JSON.parse(fs.readFileSync('weekly-safety-audit.json', 'utf8'));
              safetyIssues = safety.length || 0;
            }
          } catch (e) { console.log('Safety audit read failed:', e.message); }

          // Create issue body
          const issueBody = `## 🔍 Weekly Security & Quality Audit

**Audit Date**: ${new Date().toISOString().split('T')[0]}
**Run**: #${{ github.run_number }}

### Findings
- **Security Issues**: ${securityIssues}
- **Dependency Vulnerabilities**: ${safetyIssues}
- **Code Quality Issues**: ${qualityIssues}

### Actions Required
${securityIssues > 0 ? '- [ ] Review and fix security issues\\n' : ''}
${safetyIssues > 0 ? '- [ ] Update vulnerable dependencies\\n' : ''}
${qualityIssues > 0 ? '- [ ] Address code quality issues\\n' : ''}

### Reports
Detailed reports are available in workflow artifacts.

---
*This issue was automatically created by the weekly audit workflow.*`;

          // Create or update weekly audit issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['audit', 'weekly'],
            state: 'open'
          });

          if (issues.data.length > 0) {
            // Update existing issue
            await github.rest.issues.createComment({
              issue_number: issues.data[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issueBody
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔍 Weekly Security & Quality Audit',
              body: issueBody,
              labels: ['audit', 'weekly', 'automated']
            });
          }
